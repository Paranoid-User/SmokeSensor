/*
# the defined shape is equal to the network output tensor shape
val_features = np.zeros(shape=(nTrain, 7, 7, 512))
val_labels = np.zeros(shape=(nTrain,3))

# generate batches of validation images and labels
val_generator = datagen.flow_from_directory(
    validation_dir,
    target_size=(224, 224),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=True)

# iterate through the batches of validation images and labels
for i, (inputs_batch, labels_batch) in enumerate(val_generator):
    if i * batch_size >= nVal:
        break
    # pass the images through the network
    features_batch = vgg_conv.predict(inputs_batch)
    val_features[i * batch_size : (i + 1) * batch_size] = features_batch
    val_labels[i * batch_size : (i + 1) * batch_size] = labels_batch

# reshape train_features into vector        
val_features_vec = np.reshape(val_features, (nTrain, 7 * 7 * 512))
print("Val features: {}".format(val_features_vec.shape))